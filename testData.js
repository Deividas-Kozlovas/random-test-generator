export const INTERACTIVE_TUTOR_PROMPT = `
You are a professional teacher with expertise in IT, AI, programming, and related fields. 
Your job is to help me learn about a selected topic by guiding me through interactive learning. 
You will present me with one question at a time‚Äîthis could be a quiz, logic test, coding challenge, or any other appropriate format. 
After I answer, give me detailed feedback: explain what I did right or wrong, and provide all the information I need to understand the concept fully. 
The topic will be:
`;

export const REPS_COACH_PROMPT  = `
You are my personal "reps coach."

Objective  
  Turn me into someone who can solve small, well-defined problems on command, the way an athlete bangs out sets in the gym.

Session structure (one per day, ‚âà15 minutes)  
  1. **Warm-up** ‚Äì Briefly recap yesterday‚Äôs exercise in two sentences.  
  2. **Kata** ‚Äì Present ONE bite-sized problem that fits the topic.  
     ‚Äì Target completion time: ‚â§10 min once I‚Äôm seasoned.  
     ‚Äì Include clear acceptance criteria or unit tests.  
  3. **Timer** ‚Äì Tell me "Start the clock!" and wait for my solution.  
  4. **Review** ‚Äì When I submit code/answer, run the tests, give pass/fail, and point out one thing to improve (style, perf, readability).  
  5. **Progressive Overload** ‚Äì  
     ‚Ä¢ If I solve it in ‚â§5 min with zero test failures, make tomorrow‚Äôs kata *one notch harder* (harder constraint, bigger input, new language).  
     ‚Ä¢ Otherwise, keep the difficulty steady until I clear it cleanly.  
  6. **Reflection Prompt** ‚Äì Ask me to jot one takeaway for tomorrow.

Tracking  
  After each session, output a short log entry:  
  YYYY-MM-DD | Time_to_solve | Pass/Fail | Next_diff_level

Constraints  
  ‚Äì Keep the entire interaction inside this chat.  
  ‚Äì Do NOT reveal solutions unless I ask.  
  ‚Äì Abort or reset if I type "/reset".  
  ‚Äì Encourage rest days by reminding me after five consecutive sessions.

Tone  
  Encouraging, concise, a bit like a seasoned coach who knows when to push and when to praise.

Topic:
`;

export const FLASHCARD_TEACHER_PROMPT = `\
Role & Goal
You are my personal Programming Teacher.
Your only teaching tool for this session is flash cards (short Q&A pairs).
Your goal is to help me remember core programming concepts, detect my weak spots, and strengthen them through adaptive review.

How to run the session
1. Start by asking me what language or topic I want to drill (e.g., Python basics, JavaScript async, data structures, OOP, SQL, etc.).
2. Create an initial deck of 8‚Äì12 flash cards that span the chosen topic from easy to challenging.

Loop:
   a. Show one flash-card question only, then wait for my answer.  
   b. When I answer, reply with:  
      ‚Ä¢ **Correct!** / **Incorrect.** (bold verdict)  
      ‚Ä¢ A concise answer/explanation (‚â§ 3 sentences) including **why** the answer is right or wrong.  
      ‚Ä¢ My running score (right / total).  
   c. Adapt the deck:  
      ‚Ä¢ If I‚Äôm **correct**, drop (or postpone) that card and gradually introduce tougher or adjacent material.  
      ‚Ä¢ If I‚Äôm **wrong**, create 1‚Äì2 fresh cards that probe the same sub-topic in different ways, and keep the missed card active until I answer it correctly **twice in a row**.

After every 6‚Äì8 cards, offer a quick ‚Äúüëç keep going / üëã stop here‚Äù check.

When I signal ‚Äústop,‚Äù give a brief summary of my strengths, weak spots, and suggested next topics.

Then ask whether I‚Äôd like to add my own new topic.  
   ‚Ä¢ If I supply one, return to Step 2 with that topic; otherwise, end the session politely.

Formatting rules
‚Ä¢ Show only one flash-card question at a time.  
‚Ä¢ Use **bold** for the verdict.  
‚Ä¢ Keep explanations short; this is rapid recall, not lecturing.  
‚Ä¢ Stick to flash-card format unless I explicitly ask for another style.  
‚Ä¢ Always explain **why** after each verdict.

Example interaction
Tutor: Flash Card #1 ‚Äì Python: What‚Äôs the difference between a list and a tuple?  
Me: Tuples are immutable; lists are mutable.  
Tutor: **Correct!** Tuples can‚Äôt be changed after creation, while lists can ‚Äî that‚Äôs why. Score 1/1.  
(continues‚Ä¶)
Topic to do flashcards on is 
`;
export const testList = {
  "PHP": [
    "Core PHP Concepts",
    "PHP Classes and Objects",
    "PHP Exception Handling",
    "PHP File Handling (Functions & Examples)",
    "PHP Database Connectivity",
    "PHP MySQL CRUD Operations",
    "PHP HTTP Methods with Examples",
    "PHP Sessions and Cookies",
    "Built-in PHP Functions with Examples",
    "PHP Design Patterns",
    "PHP Documentation and Best Practices",
    "PHP Debugging Techniques",
    "PHP Scripts for Practice (Code Examples)",
    "PHP Coding Challenges (Code Examples)",
    "Modern PHP Language Features (8.x+: union types, attributes, enums, match, etc.)",
    "Composer & Dependency Management",
    "Coding Standards & Static Analysis (PSR-12, PHPStan, Psalm)",
    "Testing & Quality Assurance (PHPUnit, Mutation Testing)",
    "PHP Security Fundamentals (OWASP, Prepared Statements, CSRF/XSS)",
    "PHP Framework Ecosystem (Laravel, Symfony, Slim, Doctrine)",
    "API Development with PHP (REST, GraphQL, JWT/OAuth2)",
    "Asynchronous & Realtime PHP (Swoole, RoadRunner, ReactPHP)",
    "Tooling & Profiling (Xdebug, PHP Insights, Rector)",
    "Deployment & DevOps (Docker, Nginx/Apache, CI/CD, OpCache)",
    "Design & Architecture Principles (SOLID, DDD, Event-Driven)"
  ],

  "Algorithms": [
    "Algorithm Time and Space Complexity",
    "Big O Notation (Worst, Average, Amortized)",
    "Analyzing Algorithms for Efficiency and Scalability",
    "Data Structures Fundamentals (Arrays, Linked Lists, Stacks, Queues, Trees, Graphs, Hash Tables)",
    "Operations and Characteristics of Data Structures",
    "Recursion & Recursive Algorithms",
    "Linear Search and Binary Search",
    "Search Algorithms: Time Complexity and Use Cases",
    "Sorting Algorithms: Bubble, Selection, Insertion, Merge, Quick, Heap, Counting, Radix",
    "Sorting Algorithm Performance and Use Cases",
    "Graph Traversal Algorithms: BFS and DFS",
    "Shortest Path Algorithms: Dijkstra's, Bellman-Ford, A*, Floyd-Warshall",
    "Minimum Spanning Tree Algorithms: Prim's and Kruskal's",
    "Network Flow Algorithms: Ford-Fulkerson, Edmonds-Karp",
    "String Matching Algorithms: KMP, Rabin-Karp, Trie-based",
    "Dynamic Programming Concepts and Techniques",
    "Optimal Substructure and Overlapping Subproblems",
    "Greedy Algorithms and Their Applications",
    "Analyzing Greedy Algorithm Correctness and Optimality",
    "Divide-and-Conquer Strategy and Applications",
    "Algorithm Paradigms and Basic Principles (Backtracking, Branch-and-Bound, Randomization)",
    "NP-Completeness and Approximation Algorithms",
    "Parallel & Concurrent Algorithms Basics",
    "Implementing Algorithms from Scratch in PHP",
    "Translating Pseudocode into Executable Code",
    "Edge Cases and Special Cases in Algorithms",
    "Code Review for Time and Space Complexity",
    "Flash Cards for Big O Notation and Associated Algorithms",
    "Relationships Between Data Elements: Hierarchical, Sequential, Graph-Based",
    "Common Data Structures: Set, Map, Priority Queue, Heap, Bloom Filter",
    "Indexes and References"
  ],

  "SQL": [
    "SQL Syntax Rules, Keywords, Naming Conventions, and Efficient Query Writing",
    "Structure of SQL Queries (SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY)",
    "Primary Keys, Foreign Keys, and Table Relationships",
    "Database Normalization (1NF, 2NF, 3NF, BCNF) and Denormalization",
    "Data Manipulation (CRUD Operations)",
    "SQL Joins: INNER, LEFT, RIGHT, FULL, CROSS, SELF",
    "SELECT Queries on Single and Multiple Tables",
    "SQL Aggregate Functions (COUNT, SUM, AVG, MIN, MAX)",
    "Window Functions (OVER, PARTITION BY, RANK, LAG/LEAD)",
    "SQL Subqueries and Nested Queries",
    "Common Table Expressions (CTEs) and Recursive Queries",
    "Views and Materialized Views",
    "Stored Procedures, Functions, and Triggers",
    "SQL Data Transformation Using Functions",
    "SQL Clauses (GROUP BY, HAVING, LIMIT/OFFSET)",
    "Transaction Management and Isolation Levels (ACID)",
    "Locking and Concurrency Control",
    "Indexes: B-tree, Hash, Covering, Partial",
    "SQL Query Tuning and Optimization Techniques (Execution Plans, Indexing)",
    "Partitioning, Sharding, and Replication Strategies",
    "Backup and Restore Procedures",
    "Database Security & Permissions (DCL)",
    "DDL Statements for Schema Management",
    "DDL Constraints (NOT NULL, UNIQUE, CHECK, DEFAULT)",
    "SQL Database Administration Tasks",
    "Temporal Tables & Audit Logging",
    "SQL Code Review and Best Practices"
  ],

  "MongoDB": [
    "Understanding MongoDB Document Structure (BSON / JSON-like Documents)",
    "MongoDB Collections vs SQL Tables",
    "Basic CRUD Operations in MongoDB",
    "MongoDB Query Syntax and Filtering Documents",
    "Using Projection to Return Specific Fields",
    "Understanding ObjectId and _id Field",
    "Working with Embedded Documents and Arrays",
    "MongoDB Operators ($gt, $lt, $in, $and, $or, $regex, etc.)",
    "Updating Documents with $set, $unset, $push, $pull, $inc",
    "Deleting Documents and Collections",
    "Sorting, Limiting, and Skipping Results",
    "Creating and Managing Indexes in MongoDB",
    "Understanding MongoDB Aggregation Pipeline",
    "Common Aggregation Operators ($match, $group, $sort, $project, $lookup, $facet)",
    "Data Modeling in MongoDB (Embedded vs Referenced)",
    "Schema Design Best Practices in NoSQL",
    "Relationships in MongoDB (Manual References vs $lookup Joins)",
    "MongoDB Transactions (Replica Set / Sharded Cluster)",
    "Sharding and Horizontal Scaling",
    "Replication and Replica Sets",
    "Change Streams for Real-time Data",
    "Full-text & Geospatial Search",
    "Schema Validation & Mongoose ODM",
    "Working with MongoDB Compass: UI Overview and Basic Operations",
    "Running and Visualizing Aggregation Pipelines in Compass",
    "Monitoring and Analyzing Query Performance (Explain Plans)",
    "Data Import/Export Using MongoDB Tools (mongoimport, mongoexport, mongodump, mongorestore)",
    "Backup and Restore Strategies for MongoDB",
    "MongoDB Security (User Roles, Authentication, Encryption)",
    "MongoDB Atlas & Cloud Deployment",
    "Performance Optimization & Indexing Strategies"
  ],

  "JavaScript": [
    "JavaScript Core Language Overview",
    "Basic Syntax and Control Structures",
    "Variables, Data Types, Scoping (var, let, const)",
    "Functions and Closures",
    "Objects and Prototypes",
    "Arrays and Common Methods",
    "ES6+ Features (arrow functions, template literals, destructuring, spread/rest)",
    "Modules (ES Modules, CommonJS)",
    "Asynchronous JavaScript (Callbacks, Promises, Async/Await)",
    "Event Loop and Concurrency Model",
    "DOM Manipulation & Browser APIs",
    "Advanced DOM Topics (Shadow DOM, Virtual DOM concepts)",
    "Event Handling Patterns",
    "Error Handling & Debugging Tools",
    "Higher-Order Functions & Functional Programming Concepts (Pure Functions, Immutability)",
    "Built-in Objects (Math, Date, Intl)",
    "Web APIs (Fetch, LocalStorage, WebSockets, Service Workers)",
    "Progressive Web Apps (PWA) Fundamentals",
    "Performance Optimization & Memory Management",
    "Testing JavaScript (Jest, Mocha, Testing Library)",
    "Build Tools & Bundlers (Webpack, Rollup, Vite)",
    "Linting & Formatting (ESLint, Prettier)",
    "JavaScript Frameworks & Libraries Overview (React, Angular, Vue, Svelte)",
    "TypeScript for Static Typing in JavaScript",
    "Node.js for Server-Side JavaScript",
    "Security (XSS, CSP, Same-Origin)",
    "Package Management (npm, Yarn, pnpm)"
  ],

  "TypeScript": [
    "Basic TypeScript Syntax and Structure",
    "Type Annotations and Type Inference",
    "Primitive, Literal, and Complex Types",
    "Interfaces and Custom Types",
    "Classes, Inheritance, and Access Modifiers",
    "Generics in Functions, Interfaces, and Classes",
    "Advanced Types: Union, Intersection, Tuple, Enum, Literal Types",
    "Utility Types: Partial, Readonly, Record, Pick, Omit",
    "Type Guards and Type Narrowing",
    "Conditional and Mapped Types",
    "Template Literal Types",
    "Modules and Namespaces",
    "Decorators for Classes, Methods, and Properties",
    "Type Assertions and Non-null Assertions",
    "Error Handling and Strict Null Checks",
    "TypeScript Configuration (tsconfig.json) and Compiler Options",
    "Project References and Incremental Compilation",
    "Declaration Files and DefinitelyTyped",
    "JavaScript Interoperability",
    "Asynchronous Programming (Promises, Async/Await, Iterables)",
    "Using TypeScript with React, Angular, or Vue",
    "Using TypeScript with Node.js (ts-node, ES Modules)",
    "Testing TypeScript Code (Jest, Mocha, Cypress)",
    "Build Pipelines & Tooling (Webpack, Vite, Babel, SWC)",
    "Linting & Formatting (ESLint, Prettier)",
    "Advanced Generics & Type Manipulation",
    "Code Generation & Transformers"
  ],

  "Angular": [
    "Angular Architecture Overview (Modules, Components, Templates)",
    "Standalone Components & Simplified APIs (Angular 17+)",
    "Angular Components and Templates",
    "Angular Directives (Structural and Attribute)",
    "Data Binding in Angular",
    "Angular Services and Dependency Injection",
    "RxJS Fundamentals and Observables",
    "Routing and Navigation in Angular",
    "Lazy Loading and Module Splitting",
    "Angular Forms (Template-Driven and Reactive)",
    "Custom Validators and Form Validation",
    "Angular Pipes and Custom Pipes",
    "Angular Lifecycle Hooks",
    "HTTP Client and Interceptors",
    "Routing Guards and Resolvers",
    "State Management with NgRx / Signals",
    "Change Detection Strategies (OnPush, Signals, Zone-less)",
    "Angular Animations",
    "Testing with Jasmine, Karma, Jest",
    "Angular CLI and Workspace Monorepos (Nx)",
    "Performance Optimization & Bundle Analysis",
    "Internationalization (i18n) & Localization",
    "Security Best Practices (XSS, CSP)",
    "Server-Side Rendering with Angular Universal",
    "Progressive Web Apps (PWA) with Angular",
    "SSR & Hydration",
    "Angular Schematics and Builders",
    "Upgrade Strategies & Deprecated APIs"
  ],

  "Git": [
    "Version Control Basics & Concepts",
    "Git Architecture (Objects, References, HEAD)",
    "Key Git Terminology (Commit, Branch, Tag, Merge, Rebase)",
    "Initializing and Configuring Repositories",
    "Branching Strategies (Feature Branch, Git-Flow, Trunk-Based)",
    "Committing Best Practices and Conventional Commits",
    "Staging Area and Interactive Staging",
    "Diffs & Patches",
    "Merging vs Rebasing",
    "Resolving Merge Conflicts",
    "Reflog & History Rewriting (commit --amend, rebase -i)",
    "Cherry-Pick & Bisect for Debugging",
    "Stashing Changes",
    "Submodules & Subtrees",
    "Remote Repositories (clone, fetch, pull, push)",
    "Tags & Releases",
    "Hooks and Automation",
    "Collaborative Workflows (Pull Requests, Code Review)",
    "Essential Git Commands",
    "Git GUI Tools and IDE Integration",
    "CI/CD Integration with Git",
    "Security & Signed Commits"
  ],

  "React": [
    "React Fundamentals (JSX/TSX, Components, Props)",
    "State & Lifecycle Methods",
    "Hooks API (useState, useEffect, useContext, custom hooks)",
    "Handling Events and Synthetic Event System",
    "Lists & Keys Best Practices",
    "Forms and Controlled / Uncontrolled Components",
    "React Router v6 & Navigation",
    "Context API and Reducer Pattern",
    "State Management Options (Redux Toolkit, Zustand, Jotai)",
    "Concurrent React & React 19 Features (useTransition, Suspense)",
    "Server-Side Rendering & Static Generation (Next.js)",
    "React Server Components & Streaming",
    "Code-Splitting and Lazy Loading",
    "Performance Optimization (Memoization, Virtualization, Profiler)",
    "Error Boundaries & Recovery",
    "Asynchronous Data Fetching (React Query, SWR)",
    "Styling Approaches (CSS Modules, Styled-Components, Tailwind)",
    "Accessibility (ARIA, focus management)",
    "Best Practices & Component Patterns (HOCs, Render Props)",
    "DevTools & Debugging",
    "Internationalization (react-intl)",
    "Progressive Web Apps with React",
    "Unit Testing Components with Jest + React Testing Library",
    "Snapshot Testing (Jest)",
    "Testing Custom Hooks and Context Providers",
    "Mocking Network Requests with MSW",
    "Integration Tests (Redux, React Query, Router)",
    "Error-Boundary and Suspense Testing",
    "Accessibility Testing (jest-axe, axe-core, react-axe)",
    "End-to-End Tests (Cypress, Playwright)",
    "Visual Regression Tests (Storybook + Chromatic / Percy)",
    "Code Coverage with Istanbul / Jest",
    "Continuous Integration for React Tests (GitHub Actions, GitLab, CircleCI)"
  ],

  "NodeJS": [
    "Node.js Runtime Fundamentals",
    "Node.js Modules (CommonJS vs ES Modules)",
    "Event Loop & Asynchronous Programming",
    "File System (fs) Module",
    "Streams and Pipelines",
    "Buffers and Binary Data",
    "Process & Child Processes",
    "HTTP/HTTPS Modules and Creating Servers",
    "Building Web Apps with Express.js / Fastify",
    "Routing and Middleware",
    "Authentication & Authorization (JWT, OAuth, Passport)",
    "Integrating Databases (MongoDB, PostgreSQL, MySQL, Redis)",
    "ORMs & ODMs (Sequelize, TypeORM, Prisma, Mongoose)",
    "Building RESTful APIs",
    "GraphQL with Apollo Server",
    "Real-Time Communication (Socket.io, WebSockets)",
    "Error Handling and Logging (Winston, Pino)",
    "Clustering & Worker Threads",
    "Performance Optimization & Profiling",
    "Caching Strategies (Redis, MemoryCache)",
    "Security Best Practices (Helmet, Rate-Limiter, OWASP)",
    "Configuration & Environment Variables (dotenv)",
    "Deploying Node.js Applications (PM2, Docker, Cloud Providers)",
    "CI/CD Pipelines",
    "Using TypeScript with Node.js",
    "Building CLI Tools",
    "Monitoring & Observability (Prometheus, OpenTelemetry)",
    "Unit Testing Modules with Jest, Mocha, tap",
    "Mocking Core Modules (fs, http) and ENV Vars",
    "Testing Asynchronous Code (Promises, Callbacks, async/await)",
    "Integration Tests with Supertest (HTTP Servers)",
    "Test Doubles and Spies with Sinon",
    "Testing Event Emitters and Streams",
    "Contract Testing with Pact",
    "CLI Application Testing (yargs, commander)",
    "Performance & Load Testing (autocannon, Artillery)",
    "Security & Dependency Testing (Snyk, npm audit)",
    "Code Coverage (nyc/Istanbul)",
    "CI Pipelines for Node Tests"
  ],

  "NestJS": [
    "What Is NestJS and Why Use It?",
    "NestJS Architecture (Modules, Controllers, Providers)",
    "Dependency Injection Container",
    "Creating a New Project with Nest CLI",
    "Project Structure and Conventions",
    "Modules (root, feature, shared)",
    "Controllers (routing, request handling)",
    "Providers & Services (business logic)",
    "Custom Providers & Tokens",
    "Lifecycle Events (OnModuleInit, OnApplicationShutdown)",
    "Routing Decorators (@Get, @Post, @Patch, @Delete, @Put, etc.)",
    "Route Parameters, Query Params, and Request Body Parsing",
    "Global and Controller-Scoped Prefixes",
    "Versioning APIs",
    "Exception Filters (@Catch) and Global Error Handling",
    "Middleware (logging, modification, validation)",
    "Pipes for Transformation and Validation (class-validator, Joi)",
    "Guards for Authentication & Authorization (roles, policies)",
    "Interceptors (response mapping, timeout, caching)",
    "Custom Decorators and Metadata Reflection",
    "Using TypeORM with NestJS",
    "Sequelize, MikroORM, Prisma Support",
    "Repository Pattern vs DataMapper",
    "Transactions and Migrations",
    "Testing with In-Memory Databases",
    "Passport Strategies (JWT, Local, OAuth2)",
    "Refresh Tokens and Token Rotation",
    "Role-Based Access Control (RBAC)",
    "Policy-Based Access Control (CASL, AccessControl)",
    "Rate Limiting and Brute-Force Protection",
    "RESTful APIs (CRUD Controllers, DTOs, Validation)",
    "GraphQL Module (Code-First & Schema-First)",
    "WebSockets (Gateway, Socket.IO, WS)",
    "gRPC Microservices",
    "Server-Sent Events (SSE)",
    "Nest Microservices Package",
    "Transport Layers (TCP, Redis, NATS, MQTT, Kafka, RabbitMQ)",
    "Message Patterns and Clients",
    "Event-Driven Architecture and CQRS",
    "Saga Pattern and Outbox Pattern",
    "ConfigModule and .env Management",
    "Cross-Environment Configuration (dev, staging, prod)",
    "Secrets Management (Vault, AWS Secrets Manager)",
    "Caching Strategies (Redis, In-Memory, HTTP Cache)",
    "Async Providers & Worker Queues (BullMQ, Agenda)",
    "Profiling & Monitoring (OpenTelemetry, Prometheus)",
    "Optimizing Cold Starts (Serverless) and Bundle Size",
    "Nest CLI Commands (generate, add, build, start, test)",
    "Hot Reloading with Nest Watch / ts-node-dev",
    "Automatic Swagger/OpenAPI Documentation",
    "Linting & Formatting (ESLint, Prettier)",
    "Code Generators & Schematics",
    "Helmet and Security Headers",
    "CSRF Protection",
    "CORS Configuration",
    "Input Sanitization and Validation",
    "Dependency Auditing (npm audit, Snyk)",
    "Dockerizing NestJS Apps",
    "CI/CD Pipelines (GitHub Actions, GitLab, Jenkins)",
    "Container Orchestration (Kubernetes, ECS, Nomad)",
    "Serverless Deployment (AWS Lambda, Azure Functions)",
    "Logging (Winston, Pino) & Distributed Tracing",
    "Domain-Driven Design (DDD) in NestJS",
    "Hexagonal / Clean Architecture",
    "Monorepo Management with Nx",
    "Multitenancy Approaches",
    "Plugin System and Application Context Manipulation",
    "Unit Testing with Jest & TestingModule",
    "Mocking Providers, Guards, Pipes, and Interceptors",
    "Controller Tests with Supertest",
    "E2E Testing (e2e folder, in-memory DB)",
    "Testing GraphQL Resolvers & Subscriptions",
    "Microservice Tests (TCP, Redis, RabbitMQ transports)",
    "Overriding Providers in Tests (overrideProvider / overrideGuard)",
    "Contract Testing (Pact with Nest)",
    "Test Fixtures & Data Seeding",
    "Code Coverage Reporting",
    "CI Integration for Nest Tests"
  ],

  "ExpressJS": [
    "Setting Up an Express.js Application",
    "Express Router & Nested Routes",
    "HTTP Methods & RESTful Convention",
    "Middleware Patterns (Built-in, Third-Party, Custom)",
    "Error Handling Middleware",
    "Static File Serving",
    "Templating Engines (Pug, EJS, Handlebars)",
    "Parsing Request Bodies (body-parser, multer)",
    "Session & Cookie Management",
    "Authentication & Authorization (Passport, JWT)",
    "Input Validation & Sanitization (express-validator, Joi)",
    "Rate Limiting & Security (helmet, cors)",
    "Logging & Debugging (morgan, debug)",
    "File Uploads and Streaming",
    "Building RESTful APIs with Versioning",
    "GraphQL Integration",
    "WebSocket / SSE with Express & Socket.io",
    "Optimizing Performance & Compression",
    "Configuration Management (dotenv, config)",
    "Deploying Express Apps (PM2, Docker, Vercel)",
    "Express + TypeScript Setup",
    "Generating API Documentation (Swagger / OpenAPI)",
    "Custom Error Classes & Response Formatting",
    "Microservices & Proxying (express-gateway)",
    "Server-Side Rendering with React/Vue",
    "CI/CD for Express Projects",
    "Unit Testing Route Handlers & Middleware (Jest, Mocha)",
    "Mocking req/res Objects (node-mocks-http)",
    "Integration Testing REST APIs with Supertest",
    "Error-Handling Middleware Tests",
    "Authentication & Authorization Flow Tests (Passport, JWT)",
    "End-to-End and Contract Tests (Cypress, Postman/Newman, Pact)",
    "Seed & Teardown Test Databases",
    "Performance Tests (autocannon, k6)",
    "Security Testing (helmet headers, rate-limit cases)",
    "Code Coverage (nyc/Istanbul)",
    "CI/CD for Express Test Suites"
  ],

  "Linux": [
    "Linux Overview and Distributions (Debian, Ubuntu, RHEL, CentOS, Fedora, Arch)",
    "Filesystem Hierarchy Standard (FHS) and Directory Structure",
    "Essential Command-Line Tools (ls, cd, cp, mv, rm, touch, mkdir, rmdir)",
    "File Permissions and Ownership (chmod, chown, chgrp, umask)",
    "Users and Groups Management (useradd, usermod, passwd, groupadd)",
    "Text Processing Utilities (cat, less, head, tail, grep, awk, sed, cut, sort, uniq, tr)",
    "File Search Commands (find, locate, which, whereis, xargs)",
    "Archiving & Compression (tar, cpio, gzip, bzip2, xz, zip, unzip)",
    "Package Management (apt/apt-get, yum/dnf, pacman, zypper, snap, flatpak)",
    "Shell Fundamentals (bash, zsh, fish) and Command History",
    "Shell Scripting Basics (variables, conditionals, loops, functions, exit codes)",
    "Advanced Bash Techniques (arrays, parameter expansion, here-docs, traps)",
    "Environment Variables, Aliases, and Shell Customization (dotfiles)",
    "Process & Job Control (ps, top/htop, nice/renice, kill, bg/fg, jobs)",
    "Systemd and Service Management (systemctl, journalctl, targets)",
    "Scheduling Tasks (cron, at, systemd timers)",
    "Networking Basics (ip, ifconfig, ss, netstat, ping, traceroute, nslookup, dig)",
    "SSH and Remote Administration (ssh, scp, sftp, ssh-keygen, config files, port forwarding)",
    "Firewall Configuration (ufw, firewalld, nftables/iptables)",
    "Disk & Partition Management (lsblk, fdisk, gdisk, parted, mkfs, mount/umount)",
    "Logical Volume Management (LVM) Concepts and Commands",
    "RAID Levels and mdadm Administration",
    "Filesystems and Features (ext4, xfs, btrfs, zfs, journaling, quotas, snapshots)",
    "Kernel Basics and Module Management (uname, lsmod, modprobe, sysctl)",
    "Boot Process, GRUB, and Initramfs",
    "Logging and Log Management (/var/log, rsyslog, journald, logrotate)",
    "System Monitoring & Performance (top, htop, iostat, vmstat, sar, free, dstat)",
    "Security Hardening (sudo, polkit, SELinux, AppArmor, fail2ban)",
    "Backup & Recovery Strategies (rsync, tar, dd, timeshift, snapshots)",
    "Virtualization (KVM, QEMU, VirtualBox) Fundamentals",
    "Containers and OCI Runtime (Docker, Podman, LXC/LXD)",
    "Configuration Management Overview (Ansible, Puppet, Chef, SaltStack)",
    "Cloud-Init and Linux in Cloud Environments (AWS, Azure, GCP)",
    "Compiling Software from Source (configure, make, gcc, make install)",
    "Text Editors (vim, nano, emacs basics) and Editor Shortcuts",
    "Regular Expressions and Pattern Matching in Linux Tools",
    "Networking Services (DNS/BIND, DHCP, NFS, Samba, FTP/SFTP, HTTP/HTTPS)",
    "Git & Version Control on Linux (CLI workflow, signing commits)",
    "Troubleshooting & Rescue Mode (single-user, live USB, chroot, recovery partitions)",
    "System Backup and Disaster Recovery Planning",
    "Documentation & Help Systems (man, info, --help, tldr, cheat.sh)"
  ],

  "GraphQL": [
    "What Is GraphQL and How It Differs from REST",
    "GraphQL Core Concepts (Queries, Mutations, Subscriptions)",
    "Schema Definition Language (SDL)",
    "Scalar Types, Enums, Interfaces, Union Types",
    "Object Types and Fields",
    "Input Object Types",
    "Arguments and Variables",
    "Aliases and Fragments",
    "Directives (@include, @skip, @deprecated, custom)",
    "Schema Introspection",
    "GraphQL Over HTTP Spec (GET vs POST, batching)",
    "Resolvers: Structure and Execution Flow",
    "Error Handling in Resolvers",
    "N+1 Problem and DataLoader Batching",
    "Pagination Patterns (Cursor vs Offset)",
    "Schema Design Best Practices",
    "Versioning and Deprecation Strategies",
    "Authentication & Authorization Middleware",
    "Complexity Analysis and Depth Limiting",
    "Persisted & Automatic Persisted Queries",
    "Caching Strategies (CDN, Edge, Client-side)",
    "Subscriptions and Real-time Updates (WebSockets, SSE)",
    "Live Queries and @live Directive",
    "Incremental Delivery (@defer, @stream)",
    "Federation & Graph Composition (Apollo Federation 2, Schema Stitching)",
    "GraphQL Gateway Patterns (Apollo Gateway, GraphQL Mesh)",
    "GraphQL in Microservices and Serverless Environments",
    "Code-First vs Schema-First Approaches",
    "Apollo Server (setup, plugins, health checks)",
    "Apollo Client Basics (Cache, Local State, React Hooks)",
    "Relay & GraphQL Client Conventions",
    "urql, TanStack Query, and Other Clients",
    "TypeScript Integration and Code Generation (GraphQL Code Generator)",
    "Testing GraphQL APIs (Jest, SuperTest, Apollo Testing Utilities)",
    "Mocking GraphQL Schemas for Front-End Development",
    "Tooling: GraphiQL, GraphQL Playground, Altair, Insomnia",
    "Schema Documentation & Descriptions",
    "Custom Scalars (Date, URL, JSON) and Validation",
    "Custom Directives for Cross-Cutting Concerns",
    "GraphQL Uploads (graphql-upload, multipart spec)",
    "Subscriptions With Async Iterators and PubSub",
    "Real-time Back Ends (AWS AppSync, Hasura)",
    "Performance Monitoring & Tracing (Apollo Studio, OpenTelemetry)",
    "Security Best Practices (Rate Limiting, Depth Limit, Cost Analysis)",
    "Error Masking and Safe Error Messages",
    "Schema Federation with gRPC & REST Services",
    "GraphQL on the Edge (Cloudflare Workers, Fastly Compute@Edge)",
    "GraphQL in Native Mobile Apps (iOS, Android)",
    "GraphQL for BFF (Backend-for-Frontend) Architecture",
    "Deploying GraphQL APIs with Docker & Kubernetes",
    "CI/CD Pipelines for Schema Validation and Checks",
    "GraphQL Mesh for Integrating Multiple Data Sources",
    "Schema Registry & Contract Testing",
    "GraphQL SDL Migrations and Version Control",
    "Offline Support and Optimistic UI Updates",
    "Advanced Caching (Layered, Normalized, Entity-based)",
    "GraphQL Subscriptions at Scale (Kafka, NATS)",
    "GraphQL Query Cost Analysis Libraries",
    "Future of GraphQL Spec and Working Group Proposals"
  ],
  "DevOps": [
  "DevOps Culture & CALMS Principles",
  "Agile & Lean Practices (Scrum, Kanban) for Flow",
  "Version-Control Strategies & Git Workflows (Git-Flow, Trunk-Based, GitOps)",
  "Continuous Integration (Jenkins, GitHub Actions, GitLab CI/CD, CircleCI)",
  "Continuous Delivery & Deployment Pipelines (Spinnaker, ArgoCD, Flux)",
  "Infrastructure as Code (Terraform, Pulumi, CloudFormation, AWS CDK)",
  "Configuration Management (Ansible, Chef, Puppet, SaltStack)",
  "Containerization Fundamentals (Docker, Podman, Buildah)",
  "Container Orchestration (Kubernetes, K3s, AKS/EKS/GKE, Nomad)",
  "Helm & Kustomize for Kubernetes Manifests",
  "Service Meshes (Istio, Linkerd, Consul)",
  "Observability Stack (Prometheus, Grafana, Loki, Jaeger, OpenTelemetry)",
  "Centralized & Structured Logging (ELK/Elastic Stack, Fluent Bit)",
  "Alerting & Incident Response (Alertmanager, PagerDuty, OpsGenie)",
  "Secrets Management (HashiCorp Vault, AWS Secrets Manager, SOPS)",
  "Networking & Load Balancing (Ingress, Envoy, NGINX, AWS ALB/ELB)",
  "DevSecOps & Security Scanning (SCA, SAST, DAST, Container Scans, OPA/Gatekeeper)",
  "Artifact & Package Management (Docker Registry, Nexus, Artifactory)",
  "Release Strategies (Blue-Green, Canary, Rolling, Feature Flags)",
  "Scaling & Autoscaling (HPA, VPA, Cluster Autoscaler, KEDA)",
  "Chaos Engineering & Resilience Testing (Chaos Mesh, Gremlin)",
  "Backup & Disaster Recovery (Velero, Restic, AWS Backup)",
  "Cost Optimization & FinOps Fundamentals",
  "Serverless & FaaS (AWS Lambda, Azure Functions, Knative)",
  "Hybrid & Multi-Cloud Deployment Patterns",
  "Edge & IoT DevOps (KubeEdge, MicroK8s)",
  "Policy as Code (OPA Rego, Kyverno)",
  "Site Reliability Engineering (SLI/SLO, Error Budgets, Post-Mortems)",
  "ChatOps & Collaboration (Slack/Teams Bots, Mattermost)",
  "Performance & Load Testing (k6, Gatling, Locust, Artillery)",
  "Automated Quality Gates in Pipelines (Unit, Integration, E2E, Synthetic)",
  "Observability Dashboards & Reporting",
  "GitOps Continuous Delivery with ArgoCD/Flux",
  "Blueprints & Boilerplates (Cookiecutter, Yeoman)"
]
};
